<?php

/**
 * @file
 * Photswipe integration with Drupal module.
 */

/**
 * The minimum PhotoSwipe version we support.
 */
define('PHOTOSWIPE_MIN_PLUGIN_VERSION', '4.0.0');


/**
 * Implements hook_theme().
 */
function photoswipe_theme() {
  return array(
    'photoswipe_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'dimension' => NULL,
        'title' => NULL,
        'gid' => NULL,
      ),
      'file' => 'photoswipe.theme.inc',
    ),
    'photoswipe_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'node' => NULL,
        'field' => array(),
        'display_settings' => array(),
      ),
      'file' => 'photoswipe.theme.inc',
    ),
    'photoswipe_container' => array(
      'variables' => array(),
      'file' => 'photoswipe.theme.inc',
      'template' => 'photoswipe-container',
    ),
  );
}

/**
 * Implements hook_help().
 */
function photoswipe_help($path, $arg) {
  switch ($path) {
    // Main module help for the photoswipe module
    case 'admin/help#photoswipe':
      return '<p>' . t('PhotoSwipe provides a nice javascript-based display for photo galleries, very sleek on mobile browsers.', array('!website' => \Drupal::l(t('PhotoSwipe website'), \Drupal\Core\Url::fromUri('http://www.photoswipe.com/')))) . '</p>';
  }
}

/**
 * Implements hook_libraries_info().
 */
function photoswipe_libraries_info() {
  $libraries['photoswipe'] = array(
    'name' => 'Photoswipe plugin',
    'vendor url' => 'http://photoswipe.com',
    'download url' => 'https://github.com/dimsemenov/PhotoSwipe/archive/v4.1.0.zip',
    'path' => 'dist',
    'version arguments' => array(
      'file' => 'dist/photoswipe.min.js',
      'pattern' => '@(?i:PhotoSwipe)\s-\sv?([0-9\.a-z]+)@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'photoswipe.min.js',
        'photoswipe-ui-default.min.js'
      ),
      'css' => array(
        'photoswipe.css',
        'default-skin/default-skin.css'
      )
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'photoswipe.min.js',
            'photoswipe-ui-default.min.js'
          ),
          'css' => array(
            'photoswipe.css'
          )
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'photoswipe.js',
            'photoswipe-ui-default.js'
          ),
          'css' => array(
            'photoswipe.css',
            'default-skin/default-skin.css'
          )
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function photoswipe_page_attachments(array &$attachments) {
  // Conditionally load on an admin page
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (\Drupal::config('photoswipe.settings')->get('photoswipe_always_load_non_admin') && $is_admin) {
    photoswipe_load_assets($attachments);
  }
  // Load the Container HTML at the bottom of the page
  if (photoswipe_assets_loaded()) {
    $attachments['page_bottom']['photoswipe'] = array(
      '#theme' => 'photoswipe_container',
    );
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function photoswipe_field_formatter_info() {
  return array(
    'photoswipe' => array(
      'label' => t('Photoswipe'),
      'field types' => array('image'),
      'settings' => array(
        'photoswipe_node_style' => '',
        'photoswipe_image_style' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function photoswipe_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $image_styles_hide = $image_styles;
  $image_styles_hide['hide'] = t('Hide (do not display image)');
  $element['photoswipe_node_style'] = array(
    '#title' => t('Node image style'),
    '#type' => 'select',
    '#default_value' => $settings['photoswipe_node_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles_hide,
    '#description' => t('Image style to use in the node.'),
  );
  $element['photoswipe_image_style'] = array(
    '#title' => t('Photoswipe image style'),
    '#type' => 'select',
    '#default_value' => $settings['photoswipe_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Image style to use in the Photoswipe.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function photoswipe_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['photoswipe_node_style']])) {
    $summary[] = t('Node image style: @style', array('@style' => $image_styles[$settings['photoswipe_node_style']]));
  }
  else if ($settings['photoswipe_node_style'] == 'hide') {
    $summary[] = t('Node image style: Hide');
  }
  else {
    $summary[] = t('Node image style: Original image');
  }

  if (isset($image_styles[$settings['photoswipe_image_style']])) {
    $summary[] = t('Photoswipe image style: @style', array('@style' => $image_styles[$settings['photoswipe_image_style']]));
  }
  else {
    $summary[] = t('photoswipe image style: Original image');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function photoswipe_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (!empty($items)) {
    photoswipe_load_assets();
    $element = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('photoswipe-gallery')),
    );
  }

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'photoswipe_image_formatter',
      '#item' => $item,
      '#node' => $entity,
      '#field' => $field,
      '#display_settings' => $display['settings'],
    );
  }

  return $element;
}

/**
 * Loads photoswipe assets.
 */
function photoswipe_load_assets(array &$attachments) {
  if (!photoswipe_assets_loaded()) {
    // Add the library of Photoswipe assets
    $attachments['#attached']['library'][] = 'photoswipe/photoswipe';

    // Add photoswipe js settings.
    $settings = \Drupal::config('photoswipe.settings')->get('photoswipe_settings');
    $attachments['#attached']['drupalSettings']['photoswipe'] = $settings;

    photoswipe_assets_loaded(TRUE);
  }
}

/**
 * Stores whether photoswipe assets has been loaded in the same request.
 *
 * @param bool $loaded
 *   (Optional) Set whether assets are loaded or not.
 *
 * @return bool
 */
function photoswipe_assets_loaded($loaded = NULL) {
  $status = &drupal_static(__FUNCTION__);

  if ($loaded) {
    $status = $loaded;
  }

  return $status;
}

/**
 * Get photoswipe default settings.
 *
 * @see http://photoswipe.com/documentation/options.html
 */
function photoswipe_get_default_settings() {
  return array(
    //'index' => 0,
    //'getThumbBoundsFn' => NULL,
    'showAnimationDuration' => 333,
    'hideAnimationDuration' => 333,
    'showHideOpacity' => FALSE,
    'bgOpacity' => 1,
    'spacing' => 0.12,
    'allowPanToNext' => TRUE,
    'maxSpreadZoom' => 2,
    //'getDoubleTapZoom' => NULL,
    'loop' => TRUE,
    'pinchToClose' => TRUE,
    'closeOnScroll' => TRUE,
    'closeOnVerticalDrag' => TRUE,
    'mouseUsed' => FALSE,
    'escKey' => TRUE,
    'arrowKeys' => TRUE,
    'history' => TRUE,
    //'galleryUID' => 1,
    'errorMsg' => '<div class="pswp__error-msg">' . t('<a href="%url%" target="_blank">The image</a> could not be loaded.') . '</div>',
    'preload' => array(1, 1),
    'mainClass' => NULL,
    //'getNumItemsFn' => NULL,
    'focus' => TRUE,
    //'isClickableElement' => NULL,
  );
}
